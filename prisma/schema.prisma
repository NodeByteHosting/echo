generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    USER
    SUPPORT_AGENT
    ADMIN
    MODERATOR
}

enum TicketStatus {
    OPEN
    IN_PROGRESS
    RESOLVED
    CLOSED
    ESCALATED
}

enum Permission {
    CREATE_TICKET
    VIEW_TICKET
    CLOSE_TICKET
    ASSIGN_TICKET
    BAN_USER
    UNBAN_USER
    MANAGE_ROLES
}

model User {
    id                  Int             @id @default(autoincrement())
    username            String          @unique
    email               String?         @unique
    role                UserRole        @default(USER)
    tickets             Ticket[]        @relation("UserTickets")
    messages            Message[]       @relation("UserMessages")
    permissions         Permission[]    @default([])
    isBanned            Boolean         @default(false)
    bannedUntil         DateTime?
    banReason           String?
    createdAt           DateTime        @default(now())
    updatedAt           DateTime        @updatedAt
    SupportAgent        SupportAgent?
    moderationReceived  ModerationLog[] @relation("ModeratedUser")
    moderationPerformed ModerationLog[] @relation("ModeratorUser")
}

model Ticket {
    id             Int           @id @default(autoincrement())
    title          String
    description    String
    status         TicketStatus  @default(OPEN)
    userId         Int
    user           User          @relation("UserTickets", fields: [userId], references: [id])
    messages       Message[]     @relation("TicketMessages")
    assignedTo     Int? // SupportAgent ID
    assignedAgent  SupportAgent? @relation("AssignedAgentToTicket", fields: [assignedTo], references: [id])
    priority       Int           @default(1) // Priority level (1 = low, 5 = high)
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    closedAt       DateTime? // Optional field for when the ticket is closed
    supportAgentId Int?
    SupportAgent   SupportAgent? @relation("SupportAgentToTicket", fields: [supportAgentId], references: [id])
    isEscalated    Boolean       @default(false) // Indicates if the ticket is escalated
}

model Message {
    id         Int      @id @default(autoincrement())
    content    String
    ticketId   Int
    ticket     Ticket   @relation("TicketMessages", fields: [ticketId], references: [id])
    senderId   Int
    sender     User     @relation("UserMessages", fields: [senderId], references: [id])
    createdAt  DateTime @default(now())
    isInternal Boolean  @default(false) // Indicates if the message is internal (e.g., agent notes)
}

model SupportAgent {
    id        Int      @id @default(autoincrement())
    userId    Int      @unique
    user      User     @relation(fields: [userId], references: [id])
    tickets   Ticket[] @relation("AssignedAgentToTicket")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    isActive  Boolean  @default(true) // Indicates if the agent is currently active
    Ticket    Ticket[] @relation("SupportAgentToTicket")
}

model ModerationLog {
    id          Int       @id @default(autoincrement())
    userId      Int
    targetUser  User      @relation("ModeratedUser", fields: [userId], references: [id])
    action      String
    reason      String
    createdAt   DateTime  @default(now())
    expiresAt   DateTime?
    performedBy Int?
    moderator   User?     @relation("ModeratorUser", fields: [performedBy], references: [id])
}
